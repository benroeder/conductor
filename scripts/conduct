#!/usr/bin/env python3
# Copyright (c) 2014, Neville-Neil Consulting
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# Neither the name of Neville-Neil Consulting nor the names of its 
# contributors may be used to endorse or promote products derived from 
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Author: George V. Neville-Neil
#
# Description: Main program for conductor.  Reads the config, starts
# the players, parcels out the work, collects the results.

# "system" imports
import socket
import pickle
import configparser
import sys
import argparse
import os
import logging

# local imports
from conductor import *

def setup_logging(verbose, quiet):
    """Configure logging based on verbosity settings."""
    if quiet:
        level = logging.ERROR
    elif verbose:
        level = logging.DEBUG
    else:
        level = logging.INFO
    
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    return logging.getLogger(__name__)

def run_phase(clients, phase_name, phase_methods):
    """Run a single phase across all clients."""
    logger = logging.getLogger(__name__)
    
    # Download phase
    logger.info(f"Downloading {phase_name} phase to all clients")
    for client in clients:
        phase_methods['download'](client)
    
    # Execute phase
    logger.info(f"Executing {phase_name} phase on all clients")
    for client in clients:
        client.doit()
    
    # Collect results
    logger.info(f"Collecting {phase_name} results from all clients")
    for client in clients:
        client.results()

def __main__():
    parser = argparse.ArgumentParser(
        description='Conductor - Orchestrate distributed system tests',
        epilog='Example: conduct -t 3 -v test_config.cfg'
    )
    
    parser.add_argument(
        'config',
        help='Coordinator configuration file path'
    )
    
    parser.add_argument(
        '-t', '--trials',
        type=int,
        default=None,
        help='Number of trials to run (overrides config file)'
    )
    
    parser.add_argument(
        '-p', '--phases',
        nargs='+',
        choices=['startup', 'run', 'collect', 'reset', 'all'],
        default=['all'],
        help='Phases to execute (default: all)'
    )
    
    parser.add_argument(
        '-c', '--workers',
        nargs='+',
        default=None,
        help='Specific workers to use (overrides config file)'
    )
    
    parser.add_argument(
        '-v', '--verbose',
        action='store_true',
        help='Enable verbose output'
    )
    
    parser.add_argument(
        '-q', '--quiet',
        action='store_true',
        help='Suppress all output except errors'
    )
    
    parser.add_argument(
        '--dry-run',
        action='store_true',
        help='Show what would be executed without running'
    )
    
    parser.add_argument(
        '--version',
        action='version',
        version='Conductor 1.0'
    )
    
    args = parser.parse_args()
    
    # Setup logging
    logger = setup_logging(args.verbose, args.quiet)
    
    # Check if config file exists
    if not os.path.exists(args.config):
        logger.error(f"Configuration file not found: {args.config}")
        sys.exit(1)
    
    # Read configuration
    logger.info(f"Reading configuration from: {args.config}")
    test_config = configparser.ConfigParser()
    
    try:
        with open(args.config) as master:
            test_config.read_file(master)
    except Exception as e:
        logger.error(f"Failed to read configuration: {e}")
        sys.exit(1)
    
    # Get test defaults
    try:
        defaults = test_config['Test']
        trials = args.trials if args.trials is not None else int(defaults.get('trials', 1))
    except KeyError:
        logger.error("Configuration missing [Test] section")
        sys.exit(1)
    
    # Load workers
    clients = []
    worker_section = test_config['Workers']
    
    # Filter workers if specified
    if args.workers:
        worker_keys = [k for k in worker_section if k in args.workers]
        if not worker_keys:
            logger.error(f"No matching workers found: {args.workers}")
            sys.exit(1)
    else:
        worker_keys = worker_section
    
    logger.info(f"Loading {len(worker_keys)} worker(s)")
    
    for worker_name in worker_keys:
        worker_config_path = worker_section[worker_name]
        
        if not os.path.exists(worker_config_path):
            logger.error(f"Worker config not found: {worker_config_path}")
            sys.exit(1)
        
        logger.debug(f"Loading worker {worker_name} from {worker_config_path}")
        
        worker_config = configparser.ConfigParser()
        try:
            with open(worker_config_path) as file:
                worker_config.read_file(file)
            clients.append(client.Client(worker_config))
        except Exception as e:
            logger.error(f"Failed to load worker {worker_name}: {e}")
            sys.exit(1)
    
    if args.dry_run:
        logger.info("DRY RUN MODE - No commands will be executed")
        logger.info(f"Would run {trials} trial(s) with {len(clients)} worker(s)")
        logger.info(f"Phases: {args.phases}")
        sys.exit(0)
    
    # Determine which phases to run
    all_phases = ['startup', 'run', 'collect', 'reset']
    if 'all' in args.phases:
        phases_to_run = all_phases
    else:
        phases_to_run = [p for p in all_phases if p in args.phases]
    
    logger.info(f"Running {trials} trial(s) with phases: {', '.join(phases_to_run)}")
    
    # Phase method mapping
    phase_methods = {
        'startup': lambda c: c.startup(),
        'run': lambda c: c.run(),
        'collect': lambda c: c.collect(),
        'reset': lambda c: c.reset()
    }
    
    # Run trials
    for trial in range(trials):
        logger.info(f"Starting trial {trial + 1} of {trials}")
        
        for phase in phases_to_run:
            if phase in phase_methods:
                run_phase(clients, phase, {'download': phase_methods[phase]})
        
        logger.info(f"Completed trial {trial + 1} of {trials}")
    
    logger.info("All trials completed successfully")

if __name__ == "__main__":
    __main__()
